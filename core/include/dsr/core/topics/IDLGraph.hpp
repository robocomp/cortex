// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file IDLGraph.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__IDLGRAPH_HPP
#define FAST_DDS_GENERATED__IDLGRAPH_HPP

#include <array>
#include <cstdint>
#include <functional>
#include <map>
#include <string>
#include <utility>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/exceptions/BadParamException.h>


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(IDLGRAPH_SOURCE)
#define IDLGRAPH_DllAPI __declspec( dllexport )
#else
#define IDLGRAPH_DllAPI __declspec( dllimport )
#endif // IDLGRAPH_SOURCE
#else
#define IDLGRAPH_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define IDLGRAPH_DllAPI
#endif // _WIN32
namespace IDL{
/*!
 * @brief This class represents the union Val defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class Val
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Val()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Val()
    {
        if (member_destructor_)
        {
            member_destructor_();
        }
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Val that will be copied.
     */
    eProsima_user_DllExport Val(
            const Val& x)
    {
        m__d = x.m__d;

        switch (x.selected_member_)
        {
                        case 0x00000001:
                            str_() = x.m_str;
                            break;

                        case 0x00000002:
                            dec_() = x.m_dec;
                            break;

                        case 0x00000003:
                            fl_() = x.m_fl;
                            break;

                        case 0x00000004:
                            float_vec_() = x.m_float_vec;
                            break;

                        case 0x00000005:
                            bl_() = x.m_bl;
                            break;

                        case 0x00000006:
                            byte_vec_() = x.m_byte_vec;
                            break;

                        case 0x00000007:
                            uint_() = x.m_uint;
                            break;

                        case 0x00000008:
                            u64_() = x.m_u64;
                            break;

                        case 0x00000009:
                            dob_() = x.m_dob;
                            break;

                        case 0x0000000a:
                            uint64_vec_() = x.m_uint64_vec;
                            break;

                        case 0x0000000b:
                            vec_float2_() = x.m_vec_float2;
                            break;

                        case 0x0000000c:
                            vec_float3_() = x.m_vec_float3;
                            break;

                        case 0x0000000d:
                            vec_float4_() = x.m_vec_float4;
                            break;

                        case 0x0000000e:
                            vec_float6_() = x.m_vec_float6;
                            break;

        }
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Val that will be copied.
     */
    eProsima_user_DllExport Val(
            Val&& x) noexcept
    {
        m__d = x.m__d;

        switch (x.selected_member_)
        {
                        case 0x00000001:
                            str_() = std::move(x.m_str);
                            break;

                        case 0x00000002:
                            dec_() = std::move(x.m_dec);
                            break;

                        case 0x00000003:
                            fl_() = std::move(x.m_fl);
                            break;

                        case 0x00000004:
                            float_vec_() = std::move(x.m_float_vec);
                            break;

                        case 0x00000005:
                            bl_() = std::move(x.m_bl);
                            break;

                        case 0x00000006:
                            byte_vec_() = std::move(x.m_byte_vec);
                            break;

                        case 0x00000007:
                            uint_() = std::move(x.m_uint);
                            break;

                        case 0x00000008:
                            u64_() = std::move(x.m_u64);
                            break;

                        case 0x00000009:
                            dob_() = std::move(x.m_dob);
                            break;

                        case 0x0000000a:
                            uint64_vec_() = std::move(x.m_uint64_vec);
                            break;

                        case 0x0000000b:
                            vec_float2_() = std::move(x.m_vec_float2);
                            break;

                        case 0x0000000c:
                            vec_float3_() = std::move(x.m_vec_float3);
                            break;

                        case 0x0000000d:
                            vec_float4_() = std::move(x.m_vec_float4);
                            break;

                        case 0x0000000e:
                            vec_float6_() = std::move(x.m_vec_float6);
                            break;

        }
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Val that will be copied.
     */
    eProsima_user_DllExport Val& operator =(
            const Val& x)
    {
        m__d = x.m__d;

        switch (x.selected_member_)
        {
                        case 0x00000001:
                            str_() = x.m_str;
                            break;

                        case 0x00000002:
                            dec_() = x.m_dec;
                            break;

                        case 0x00000003:
                            fl_() = x.m_fl;
                            break;

                        case 0x00000004:
                            float_vec_() = x.m_float_vec;
                            break;

                        case 0x00000005:
                            bl_() = x.m_bl;
                            break;

                        case 0x00000006:
                            byte_vec_() = x.m_byte_vec;
                            break;

                        case 0x00000007:
                            uint_() = x.m_uint;
                            break;

                        case 0x00000008:
                            u64_() = x.m_u64;
                            break;

                        case 0x00000009:
                            dob_() = x.m_dob;
                            break;

                        case 0x0000000a:
                            uint64_vec_() = x.m_uint64_vec;
                            break;

                        case 0x0000000b:
                            vec_float2_() = x.m_vec_float2;
                            break;

                        case 0x0000000c:
                            vec_float3_() = x.m_vec_float3;
                            break;

                        case 0x0000000d:
                            vec_float4_() = x.m_vec_float4;
                            break;

                        case 0x0000000e:
                            vec_float6_() = x.m_vec_float6;
                            break;

        }

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Val that will be copied.
     */
    eProsima_user_DllExport Val& operator =(
            Val&& x) noexcept
    {
        m__d = x.m__d;

        switch (x.selected_member_)
        {
                        case 0x00000001:
                            str_() = std::move(x.m_str);
                            break;

                        case 0x00000002:
                            dec_() = std::move(x.m_dec);
                            break;

                        case 0x00000003:
                            fl_() = std::move(x.m_fl);
                            break;

                        case 0x00000004:
                            float_vec_() = std::move(x.m_float_vec);
                            break;

                        case 0x00000005:
                            bl_() = std::move(x.m_bl);
                            break;

                        case 0x00000006:
                            byte_vec_() = std::move(x.m_byte_vec);
                            break;

                        case 0x00000007:
                            uint_() = std::move(x.m_uint);
                            break;

                        case 0x00000008:
                            u64_() = std::move(x.m_u64);
                            break;

                        case 0x00000009:
                            dob_() = std::move(x.m_dob);
                            break;

                        case 0x0000000a:
                            uint64_vec_() = std::move(x.m_uint64_vec);
                            break;

                        case 0x0000000b:
                            vec_float2_() = std::move(x.m_vec_float2);
                            break;

                        case 0x0000000c:
                            vec_float3_() = std::move(x.m_vec_float3);
                            break;

                        case 0x0000000d:
                            vec_float4_() = std::move(x.m_vec_float4);
                            break;

                        case 0x0000000e:
                            vec_float6_() = std::move(x.m_vec_float6);
                            break;

        }

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Val object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Val& x) const
    {
        bool ret_value {false};

        if (x.selected_member_ == selected_member_)
        {
            if (0x0FFFFFFFu != selected_member_)
            {
                if (x.m__d == m__d)
                {
                    switch (selected_member_)
                    {
                                                    case 0x00000001:
                                                        ret_value = (x.m_str == m_str);
                                                        break;

                                                    case 0x00000002:
                                                        ret_value = (x.m_dec == m_dec);
                                                        break;

                                                    case 0x00000003:
                                                        ret_value = (x.m_fl == m_fl);
                                                        break;

                                                    case 0x00000004:
                                                        ret_value = (x.m_float_vec == m_float_vec);
                                                        break;

                                                    case 0x00000005:
                                                        ret_value = (x.m_bl == m_bl);
                                                        break;

                                                    case 0x00000006:
                                                        ret_value = (x.m_byte_vec == m_byte_vec);
                                                        break;

                                                    case 0x00000007:
                                                        ret_value = (x.m_uint == m_uint);
                                                        break;

                                                    case 0x00000008:
                                                        ret_value = (x.m_u64 == m_u64);
                                                        break;

                                                    case 0x00000009:
                                                        ret_value = (x.m_dob == m_dob);
                                                        break;

                                                    case 0x0000000a:
                                                        ret_value = (x.m_uint64_vec == m_uint64_vec);
                                                        break;

                                                    case 0x0000000b:
                                                        ret_value = (x.m_vec_float2 == m_vec_float2);
                                                        break;

                                                    case 0x0000000c:
                                                        ret_value = (x.m_vec_float3 == m_vec_float3);
                                                        break;

                                                    case 0x0000000d:
                                                        ret_value = (x.m_vec_float4 == m_vec_float4);
                                                        break;

                                                    case 0x0000000e:
                                                        ret_value = (x.m_vec_float6 == m_vec_float6);
                                                        break;

                    }
                }
            }
            else
            {
                ret_value = true;
            }
        }

        return ret_value;
    }

    /*!
     * @brief Comparison operator.
     * @param x Val object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Val& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d)
    {
        bool valid_discriminator = false;

        switch (__d)
        {
                        case 0:
                            if (0x00000001 == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 1:
                            if (0x00000002 == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 2:
                            if (0x00000003 == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 3:
                            if (0x00000004 == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 4:
                            if (0x00000005 == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 5:
                            if (0x00000006 == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 6:
                            if (0x00000007 == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 7:
                            if (0x00000008 == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 8:
                            if (0x00000009 == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 9:
                            if (0x0000000a == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 10:
                            if (0x0000000b == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 11:
                            if (0x0000000c == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 12:
                            if (0x0000000d == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

                        case 13:
                            if (0x0000000e == selected_member_)
                            {
                                valid_discriminator = true;
                            }
                            break;

        }

        if (!valid_discriminator)
        {
            throw eprosima::fastcdr::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
        }

        m__d = __d;
    }

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const
    {
        return m__d;
    }

    /*!
     * @brief This function copies the value in member str
     * @param _str New value to be copied in member str
     */
    eProsima_user_DllExport void str(
            const std::string& _str)
    {
        str_() = _str;
        m__d = 0;
    }

    /*!
     * @brief This function moves the value in member str
     * @param _str New value to be moved in member str
     */
    eProsima_user_DllExport void str(
            std::string&& _str)
    {
        str_() = _str;
        m__d = 0;
    }

    /*!
     * @brief This function returns a constant reference to member str
     * @return Constant reference to member str
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const std::string& str() const
    {
        if (0x00000001 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_str;
    }

    /*!
     * @brief This function returns a reference to member str
     * @return Reference to member str
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport std::string& str()
    {
        if (0x00000001 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_str;
    }


    /*!
     * @brief This function sets a value in member dec
     * @param _dec New value for member dec
     */
    eProsima_user_DllExport void dec(
            int32_t _dec)
    {
        dec_() = _dec;
        m__d = 1;
    }

    /*!
     * @brief This function returns the value of member dec
     * @return Value of member dec
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t dec() const
    {
        if (0x00000002 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_dec;
    }

    /*!
     * @brief This function returns a reference to member dec
     * @return Reference to member dec
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& dec()
    {
        if (0x00000002 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_dec;
    }


    /*!
     * @brief This function sets a value in member fl
     * @param _fl New value for member fl
     */
    eProsima_user_DllExport void fl(
            float _fl)
    {
        fl_() = _fl;
        m__d = 2;
    }

    /*!
     * @brief This function returns the value of member fl
     * @return Value of member fl
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float fl() const
    {
        if (0x00000003 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_fl;
    }

    /*!
     * @brief This function returns a reference to member fl
     * @return Reference to member fl
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float& fl()
    {
        if (0x00000003 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_fl;
    }


    /*!
     * @brief This function copies the value in member float_vec
     * @param _float_vec New value to be copied in member float_vec
     */
    eProsima_user_DllExport void float_vec(
            const std::vector<float>& _float_vec)
    {
        float_vec_() = _float_vec;
        m__d = 3;
    }

    /*!
     * @brief This function moves the value in member float_vec
     * @param _float_vec New value to be moved in member float_vec
     */
    eProsima_user_DllExport void float_vec(
            std::vector<float>&& _float_vec)
    {
        float_vec_() = _float_vec;
        m__d = 3;
    }

    /*!
     * @brief This function returns a constant reference to member float_vec
     * @return Constant reference to member float_vec
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const std::vector<float>& float_vec() const
    {
        if (0x00000004 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_float_vec;
    }

    /*!
     * @brief This function returns a reference to member float_vec
     * @return Reference to member float_vec
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport std::vector<float>& float_vec()
    {
        if (0x00000004 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_float_vec;
    }


    /*!
     * @brief This function sets a value in member bl
     * @param _bl New value for member bl
     */
    eProsima_user_DllExport void bl(
            bool _bl)
    {
        bl_() = _bl;
        m__d = 4;
    }

    /*!
     * @brief This function returns the value of member bl
     * @return Value of member bl
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport bool bl() const
    {
        if (0x00000005 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_bl;
    }

    /*!
     * @brief This function returns a reference to member bl
     * @return Reference to member bl
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport bool& bl()
    {
        if (0x00000005 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_bl;
    }


    /*!
     * @brief This function copies the value in member byte_vec
     * @param _byte_vec New value to be copied in member byte_vec
     */
    eProsima_user_DllExport void byte_vec(
            const std::vector<uint8_t>& _byte_vec)
    {
        byte_vec_() = _byte_vec;
        m__d = 5;
    }

    /*!
     * @brief This function moves the value in member byte_vec
     * @param _byte_vec New value to be moved in member byte_vec
     */
    eProsima_user_DllExport void byte_vec(
            std::vector<uint8_t>&& _byte_vec)
    {
        byte_vec_() = _byte_vec;
        m__d = 5;
    }

    /*!
     * @brief This function returns a constant reference to member byte_vec
     * @return Constant reference to member byte_vec
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const std::vector<uint8_t>& byte_vec() const
    {
        if (0x00000006 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_byte_vec;
    }

    /*!
     * @brief This function returns a reference to member byte_vec
     * @return Reference to member byte_vec
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport std::vector<uint8_t>& byte_vec()
    {
        if (0x00000006 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_byte_vec;
    }


    /*!
     * @brief This function sets a value in member uint
     * @param _uint New value for member uint
     */
    eProsima_user_DllExport void uint(
            uint32_t _uint)
    {
        uint_() = _uint;
        m__d = 6;
    }

    /*!
     * @brief This function returns the value of member uint
     * @return Value of member uint
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport uint32_t uint() const
    {
        if (0x00000007 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_uint;
    }

    /*!
     * @brief This function returns a reference to member uint
     * @return Reference to member uint
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport uint32_t& uint()
    {
        if (0x00000007 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_uint;
    }


    /*!
     * @brief This function sets a value in member u64
     * @param _u64 New value for member u64
     */
    eProsima_user_DllExport void u64(
            uint64_t _u64)
    {
        u64_() = _u64;
        m__d = 7;
    }

    /*!
     * @brief This function returns the value of member u64
     * @return Value of member u64
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport uint64_t u64() const
    {
        if (0x00000008 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_u64;
    }

    /*!
     * @brief This function returns a reference to member u64
     * @return Reference to member u64
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport uint64_t& u64()
    {
        if (0x00000008 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_u64;
    }


    /*!
     * @brief This function sets a value in member dob
     * @param _dob New value for member dob
     */
    eProsima_user_DllExport void dob(
            double _dob)
    {
        dob_() = _dob;
        m__d = 8;
    }

    /*!
     * @brief This function returns the value of member dob
     * @return Value of member dob
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport double dob() const
    {
        if (0x00000009 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_dob;
    }

    /*!
     * @brief This function returns a reference to member dob
     * @return Reference to member dob
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport double& dob()
    {
        if (0x00000009 != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_dob;
    }


    /*!
     * @brief This function copies the value in member uint64_vec
     * @param _uint64_vec New value to be copied in member uint64_vec
     */
    eProsima_user_DllExport void uint64_vec(
            const std::vector<uint64_t>& _uint64_vec)
    {
        uint64_vec_() = _uint64_vec;
        m__d = 9;
    }

    /*!
     * @brief This function moves the value in member uint64_vec
     * @param _uint64_vec New value to be moved in member uint64_vec
     */
    eProsima_user_DllExport void uint64_vec(
            std::vector<uint64_t>&& _uint64_vec)
    {
        uint64_vec_() = _uint64_vec;
        m__d = 9;
    }

    /*!
     * @brief This function returns a constant reference to member uint64_vec
     * @return Constant reference to member uint64_vec
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const std::vector<uint64_t>& uint64_vec() const
    {
        if (0x0000000a != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_uint64_vec;
    }

    /*!
     * @brief This function returns a reference to member uint64_vec
     * @return Reference to member uint64_vec
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport std::vector<uint64_t>& uint64_vec()
    {
        if (0x0000000a != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_uint64_vec;
    }


    /*!
     * @brief This function copies the value in member vec_float2
     * @param _vec_float2 New value to be copied in member vec_float2
     */
    eProsima_user_DllExport void vec_float2(
            const std::array<float, 2>& _vec_float2)
    {
        vec_float2_() = _vec_float2;
        m__d = 10;
    }

    /*!
     * @brief This function moves the value in member vec_float2
     * @param _vec_float2 New value to be moved in member vec_float2
     */
    eProsima_user_DllExport void vec_float2(
            std::array<float, 2>&& _vec_float2)
    {
        vec_float2_() = _vec_float2;
        m__d = 10;
    }

    /*!
     * @brief This function returns a constant reference to member vec_float2
     * @return Constant reference to member vec_float2
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const std::array<float, 2>& vec_float2() const
    {
        if (0x0000000b != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_vec_float2;
    }

    /*!
     * @brief This function returns a reference to member vec_float2
     * @return Reference to member vec_float2
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport std::array<float, 2>& vec_float2()
    {
        if (0x0000000b != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_vec_float2;
    }


    /*!
     * @brief This function copies the value in member vec_float3
     * @param _vec_float3 New value to be copied in member vec_float3
     */
    eProsima_user_DllExport void vec_float3(
            const std::array<float, 3>& _vec_float3)
    {
        vec_float3_() = _vec_float3;
        m__d = 11;
    }

    /*!
     * @brief This function moves the value in member vec_float3
     * @param _vec_float3 New value to be moved in member vec_float3
     */
    eProsima_user_DllExport void vec_float3(
            std::array<float, 3>&& _vec_float3)
    {
        vec_float3_() = _vec_float3;
        m__d = 11;
    }

    /*!
     * @brief This function returns a constant reference to member vec_float3
     * @return Constant reference to member vec_float3
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const std::array<float, 3>& vec_float3() const
    {
        if (0x0000000c != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_vec_float3;
    }

    /*!
     * @brief This function returns a reference to member vec_float3
     * @return Reference to member vec_float3
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport std::array<float, 3>& vec_float3()
    {
        if (0x0000000c != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_vec_float3;
    }


    /*!
     * @brief This function copies the value in member vec_float4
     * @param _vec_float4 New value to be copied in member vec_float4
     */
    eProsima_user_DllExport void vec_float4(
            const std::array<float, 4>& _vec_float4)
    {
        vec_float4_() = _vec_float4;
        m__d = 12;
    }

    /*!
     * @brief This function moves the value in member vec_float4
     * @param _vec_float4 New value to be moved in member vec_float4
     */
    eProsima_user_DllExport void vec_float4(
            std::array<float, 4>&& _vec_float4)
    {
        vec_float4_() = _vec_float4;
        m__d = 12;
    }

    /*!
     * @brief This function returns a constant reference to member vec_float4
     * @return Constant reference to member vec_float4
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const std::array<float, 4>& vec_float4() const
    {
        if (0x0000000d != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_vec_float4;
    }

    /*!
     * @brief This function returns a reference to member vec_float4
     * @return Reference to member vec_float4
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport std::array<float, 4>& vec_float4()
    {
        if (0x0000000d != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_vec_float4;
    }


    /*!
     * @brief This function copies the value in member vec_float6
     * @param _vec_float6 New value to be copied in member vec_float6
     */
    eProsima_user_DllExport void vec_float6(
            const std::array<float, 6>& _vec_float6)
    {
        vec_float6_() = _vec_float6;
        m__d = 13;
    }

    /*!
     * @brief This function moves the value in member vec_float6
     * @param _vec_float6 New value to be moved in member vec_float6
     */
    eProsima_user_DllExport void vec_float6(
            std::array<float, 6>&& _vec_float6)
    {
        vec_float6_() = _vec_float6;
        m__d = 13;
    }

    /*!
     * @brief This function returns a constant reference to member vec_float6
     * @return Constant reference to member vec_float6
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const std::array<float, 6>& vec_float6() const
    {
        if (0x0000000e != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_vec_float6;
    }

    /*!
     * @brief This function returns a reference to member vec_float6
     * @return Reference to member vec_float6
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport std::array<float, 6>& vec_float6()
    {
        if (0x0000000e != selected_member_)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_vec_float6;
    }


    void _default()
    {
        if (member_destructor_)
        {
            member_destructor_();
        }

        selected_member_ = 0x0FFFFFFFu;
    }


private:

            std::string& str_()
            {
                if (0x00000001 != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x00000001;
                    member_destructor_ = [&]() {m_str.~basic_string();};
                    new(&m_str) std::string();

                }

                return m_str;
            }

            int32_t& dec_()
            {
                if (0x00000002 != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x00000002;
                    member_destructor_ = nullptr;
                    m_dec = {0};

                }

                return m_dec;
            }

            float& fl_()
            {
                if (0x00000003 != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x00000003;
                    member_destructor_ = nullptr;
                    m_fl = {0.0};

                }

                return m_fl;
            }

            std::vector<float>& float_vec_()
            {
                if (0x00000004 != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x00000004;
                    member_destructor_ = [&]() {m_float_vec.~vector();};
                    new(&m_float_vec) std::vector<float>();

                }

                return m_float_vec;
            }

            bool& bl_()
            {
                if (0x00000005 != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x00000005;
                    member_destructor_ = nullptr;
                    m_bl = {false};

                }

                return m_bl;
            }

            std::vector<uint8_t>& byte_vec_()
            {
                if (0x00000006 != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x00000006;
                    member_destructor_ = [&]() {m_byte_vec.~vector();};
                    new(&m_byte_vec) std::vector<uint8_t>();

                }

                return m_byte_vec;
            }

            uint32_t& uint_()
            {
                if (0x00000007 != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x00000007;
                    member_destructor_ = nullptr;
                    m_uint = {0};

                }

                return m_uint;
            }

            uint64_t& u64_()
            {
                if (0x00000008 != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x00000008;
                    member_destructor_ = nullptr;
                    m_u64 = {0};

                }

                return m_u64;
            }

            double& dob_()
            {
                if (0x00000009 != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x00000009;
                    member_destructor_ = nullptr;
                    m_dob = {0.0};

                }

                return m_dob;
            }

            std::vector<uint64_t>& uint64_vec_()
            {
                if (0x0000000a != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x0000000a;
                    member_destructor_ = [&]() {m_uint64_vec.~vector();};
                    new(&m_uint64_vec) std::vector<uint64_t>();

                }

                return m_uint64_vec;
            }

            std::array<float, 2>& vec_float2_()
            {
                if (0x0000000b != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x0000000b;
                    member_destructor_ = [&]() {m_vec_float2.~array();};
                    new(&m_vec_float2) std::array<float, 2>();

                }

                return m_vec_float2;
            }

            std::array<float, 3>& vec_float3_()
            {
                if (0x0000000c != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x0000000c;
                    member_destructor_ = [&]() {m_vec_float3.~array();};
                    new(&m_vec_float3) std::array<float, 3>();

                }

                return m_vec_float3;
            }

            std::array<float, 4>& vec_float4_()
            {
                if (0x0000000d != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x0000000d;
                    member_destructor_ = [&]() {m_vec_float4.~array();};
                    new(&m_vec_float4) std::array<float, 4>();

                }

                return m_vec_float4;
            }

            std::array<float, 6>& vec_float6_()
            {
                if (0x0000000e != selected_member_)
                {
                    if (member_destructor_)
                    {
                        member_destructor_();
                    }

                    selected_member_ = 0x0000000e;
                    member_destructor_ = [&]() {m_vec_float6.~array();};
                    new(&m_vec_float6) std::array<float, 6>();

                }

                return m_vec_float6;
            }


    int32_t m__d {2147483647};

    union
    {
        std::string m_str;
        int32_t m_dec;
        float m_fl;
        std::vector<float> m_float_vec;
        bool m_bl;
        std::vector<uint8_t> m_byte_vec;
        uint32_t m_uint;
        uint64_t m_u64;
        double m_dob;
        std::vector<uint64_t> m_uint64_vec;
        std::array<float, 2> m_vec_float2;
        std::array<float, 3> m_vec_float3;
        std::array<float, 4> m_vec_float4;
        std::array<float, 6> m_vec_float6;
    };

    uint32_t selected_member_ {0x0FFFFFFFu};

    std::function<void()> member_destructor_;
};
/*!
 * @brief This class represents the enumeration Types defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
enum class Types : int32_t
{
    STRING,
    INT,
    FLOAT,
    FLOAT_VEC,
    BOOL,
    BYTE_VEC,
    UINT,
    UINT64,
    DOUBLE,
    UINT64_VEC,
    VEC_FLOAT2,
    VEC_FLOAT3,
    VEC_FLOAT4,
    VEC_FLOAT6
};
/*!
 * @brief This class represents the structure Attrib defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class Attrib
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Attrib()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Attrib()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Attrib that will be copied.
     */
    eProsima_user_DllExport Attrib(
            const Attrib& x)
    {
                    m_type = x.m_type;

                    m_value = x.m_value;

                    m_timestamp = x.m_timestamp;

                    m_agent_id = x.m_agent_id;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Attrib that will be copied.
     */
    eProsima_user_DllExport Attrib(
            Attrib&& x) noexcept
    {
        m_type = x.m_type;
        m_value = std::move(x.m_value);
        m_timestamp = x.m_timestamp;
        m_agent_id = x.m_agent_id;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Attrib that will be copied.
     */
    eProsima_user_DllExport Attrib& operator =(
            const Attrib& x)
    {

                    m_type = x.m_type;

                    m_value = x.m_value;

                    m_timestamp = x.m_timestamp;

                    m_agent_id = x.m_agent_id;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Attrib that will be copied.
     */
    eProsima_user_DllExport Attrib& operator =(
            Attrib&& x) noexcept
    {

        m_type = x.m_type;
        m_value = std::move(x.m_value);
        m_timestamp = x.m_timestamp;
        m_agent_id = x.m_agent_id;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Attrib object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Attrib& x) const
    {
        return (m_type == x.m_type &&
           m_value == x.m_value &&
           m_timestamp == x.m_timestamp &&
           m_agent_id == x.m_agent_id);
    }

    /*!
     * @brief Comparison operator.
     * @param x Attrib object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Attrib& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    eProsima_user_DllExport void type(
            uint32_t _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    eProsima_user_DllExport uint32_t type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport uint32_t& type()
    {
        return m_type;
    }


    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const Val& _value)
    {
        m_value = _value;
    }

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            Val&& _value)
    {
        m_value = std::move(_value);
    }

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const Val& value() const
    {
        return m_value;
    }

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport Val& value()
    {
        return m_value;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }


    /*!
     * @brief This function sets a value in member agent_id
     * @param _agent_id New value for member agent_id
     */
    eProsima_user_DllExport void agent_id(
            uint32_t _agent_id)
    {
        m_agent_id = _agent_id;
    }

    /*!
     * @brief This function returns the value of member agent_id
     * @return Value of member agent_id
     */
    eProsima_user_DllExport uint32_t agent_id() const
    {
        return m_agent_id;
    }

    /*!
     * @brief This function returns a reference to member agent_id
     * @return Reference to member agent_id
     */
    eProsima_user_DllExport uint32_t& agent_id()
    {
        return m_agent_id;
    }



private:

    uint32_t m_type{0};
    Val m_value;
    uint64_t m_timestamp{0};
    uint32_t m_agent_id{0};

};
/*!
 * @brief This class represents the structure PairInt defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class PairInt
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PairInt()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PairInt()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PairInt that will be copied.
     */
    eProsima_user_DllExport PairInt(
            const PairInt& x)
    {
                    m_first = x.m_first;

                    m_second = x.m_second;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PairInt that will be copied.
     */
    eProsima_user_DllExport PairInt(
            PairInt&& x) noexcept
    {
        m_first = x.m_first;
        m_second = x.m_second;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PairInt that will be copied.
     */
    eProsima_user_DllExport PairInt& operator =(
            const PairInt& x)
    {

                    m_first = x.m_first;

                    m_second = x.m_second;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PairInt that will be copied.
     */
    eProsima_user_DllExport PairInt& operator =(
            PairInt&& x) noexcept
    {

        m_first = x.m_first;
        m_second = x.m_second;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x PairInt object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PairInt& x) const
    {
        return (m_first == x.m_first &&
           m_second == x.m_second);
    }

    /*!
     * @brief Comparison operator.
     * @param x PairInt object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PairInt& x) const
    {
        return !(*this == x);
    }

    eProsima_user_DllExport bool operator<(
            const PairInt &rhs) const
    {
        if (m_first < rhs.m_first)
            return true;
        if (rhs.m_first < m_first)
            return false;
        return m_second < rhs.m_second;
    }

    /*!
     * @brief This function sets a value in member first
     * @param _first New value for member first
     */
    eProsima_user_DllExport void first(
            uint64_t _first)
    {
        m_first = _first;
    }

    /*!
     * @brief This function returns the value of member first
     * @return Value of member first
     */
    eProsima_user_DllExport uint64_t first() const
    {
        return m_first;
    }

    /*!
     * @brief This function returns a reference to member first
     * @return Reference to member first
     */
    eProsima_user_DllExport uint64_t& first()
    {
        return m_first;
    }


    /*!
     * @brief This function sets a value in member second
     * @param _second New value for member second
     */
    eProsima_user_DllExport void second(
            int32_t _second)
    {
        m_second = _second;
    }

    /*!
     * @brief This function returns the value of member second
     * @return Value of member second
     */
    eProsima_user_DllExport int32_t second() const
    {
        return m_second;
    }

    /*!
     * @brief This function returns a reference to member second
     * @return Reference to member second
     */
    eProsima_user_DllExport int32_t& second()
    {
        return m_second;
    }



private:

    uint64_t m_first{0};
    int32_t m_second{0};

};
/*!
 * @brief This class represents the structure DotContext defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class DotContext
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DotContext()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DotContext()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DotContext that will be copied.
     */
    eProsima_user_DllExport DotContext(
            const DotContext& x)
    {
                    m_cc = x.m_cc;

                    m_dc = x.m_dc;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DotContext that will be copied.
     */
    eProsima_user_DllExport DotContext(
            DotContext&& x) noexcept
    {
        m_cc = std::move(x.m_cc);
        m_dc = std::move(x.m_dc);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DotContext that will be copied.
     */
    eProsima_user_DllExport DotContext& operator =(
            const DotContext& x)
    {

                    m_cc = x.m_cc;

                    m_dc = x.m_dc;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DotContext that will be copied.
     */
    eProsima_user_DllExport DotContext& operator =(
            DotContext&& x) noexcept
    {

        m_cc = std::move(x.m_cc);
        m_dc = std::move(x.m_dc);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x DotContext object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DotContext& x) const
    {
        return (m_cc == x.m_cc &&
           m_dc == x.m_dc);
    }

    /*!
     * @brief Comparison operator.
     * @param x DotContext object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DotContext& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member cc
     * @param _cc New value to be copied in member cc
     */
    eProsima_user_DllExport void cc(
            const std::map<uint64_t, int32_t>& _cc)
    {
        m_cc = _cc;
    }

    /*!
     * @brief This function moves the value in member cc
     * @param _cc New value to be moved in member cc
     */
    eProsima_user_DllExport void cc(
            std::map<uint64_t, int32_t>&& _cc)
    {
        m_cc = std::move(_cc);
    }

    /*!
     * @brief This function returns a constant reference to member cc
     * @return Constant reference to member cc
     */
    eProsima_user_DllExport const std::map<uint64_t, int32_t>& cc() const
    {
        return m_cc;
    }

    /*!
     * @brief This function returns a reference to member cc
     * @return Reference to member cc
     */
    eProsima_user_DllExport std::map<uint64_t, int32_t>& cc()
    {
        return m_cc;
    }


    /*!
     * @brief This function copies the value in member dc
     * @param _dc New value to be copied in member dc
     */
    eProsima_user_DllExport void dc(
            const std::vector<PairInt>& _dc)
    {
        m_dc = _dc;
    }

    /*!
     * @brief This function moves the value in member dc
     * @param _dc New value to be moved in member dc
     */
    eProsima_user_DllExport void dc(
            std::vector<PairInt>&& _dc)
    {
        m_dc = std::move(_dc);
    }

    /*!
     * @brief This function returns a constant reference to member dc
     * @return Constant reference to member dc
     */
    eProsima_user_DllExport const std::vector<PairInt>& dc() const
    {
        return m_dc;
    }

    /*!
     * @brief This function returns a reference to member dc
     * @return Reference to member dc
     */
    eProsima_user_DllExport std::vector<PairInt>& dc()
    {
        return m_dc;
    }



private:

    std::map<uint64_t, int32_t> m_cc;
    std::vector<PairInt> m_dc;

};
/*!
 * @brief This class represents the structure DotKernelAttr defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class DotKernelAttr
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DotKernelAttr()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DotKernelAttr()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DotKernelAttr that will be copied.
     */
    eProsima_user_DllExport DotKernelAttr(
            const DotKernelAttr& x)
    {
                    m_ds = x.m_ds;

                    m_cbase = x.m_cbase;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DotKernelAttr that will be copied.
     */
    eProsima_user_DllExport DotKernelAttr(
            DotKernelAttr&& x) noexcept
    {
        m_ds = std::move(x.m_ds);
        m_cbase = std::move(x.m_cbase);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DotKernelAttr that will be copied.
     */
    eProsima_user_DllExport DotKernelAttr& operator =(
            const DotKernelAttr& x)
    {

                    m_ds = x.m_ds;

                    m_cbase = x.m_cbase;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DotKernelAttr that will be copied.
     */
    eProsima_user_DllExport DotKernelAttr& operator =(
            DotKernelAttr&& x) noexcept
    {

        m_ds = std::move(x.m_ds);
        m_cbase = std::move(x.m_cbase);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x DotKernelAttr object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DotKernelAttr& x) const
    {
        return (m_ds == x.m_ds &&
           m_cbase == x.m_cbase);
    }

    /*!
     * @brief Comparison operator.
     * @param x DotKernelAttr object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DotKernelAttr& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member ds
     * @param _ds New value to be copied in member ds
     */
    eProsima_user_DllExport void ds(
            const std::map<PairInt, Attrib>& _ds)
    {
        m_ds = _ds;
    }

    /*!
     * @brief This function moves the value in member ds
     * @param _ds New value to be moved in member ds
     */
    eProsima_user_DllExport void ds(
            std::map<PairInt, Attrib>&& _ds)
    {
        m_ds = std::move(_ds);
    }

    /*!
     * @brief This function returns a constant reference to member ds
     * @return Constant reference to member ds
     */
    eProsima_user_DllExport const std::map<PairInt, Attrib>& ds() const
    {
        return m_ds;
    }

    /*!
     * @brief This function returns a reference to member ds
     * @return Reference to member ds
     */
    eProsima_user_DllExport std::map<PairInt, Attrib>& ds()
    {
        return m_ds;
    }


    /*!
     * @brief This function copies the value in member cbase
     * @param _cbase New value to be copied in member cbase
     */
    eProsima_user_DllExport void cbase(
            const DotContext& _cbase)
    {
        m_cbase = _cbase;
    }

    /*!
     * @brief This function moves the value in member cbase
     * @param _cbase New value to be moved in member cbase
     */
    eProsima_user_DllExport void cbase(
            DotContext&& _cbase)
    {
        m_cbase = std::move(_cbase);
    }

    /*!
     * @brief This function returns a constant reference to member cbase
     * @return Constant reference to member cbase
     */
    eProsima_user_DllExport const DotContext& cbase() const
    {
        return m_cbase;
    }

    /*!
     * @brief This function returns a reference to member cbase
     * @return Reference to member cbase
     */
    eProsima_user_DllExport DotContext& cbase()
    {
        return m_cbase;
    }



private:

    std::map<PairInt, Attrib> m_ds;
    DotContext m_cbase;

};
/*!
 * @brief This class represents the structure MvregEdgeAttr defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class MvregEdgeAttr
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MvregEdgeAttr()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MvregEdgeAttr()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MvregEdgeAttr that will be copied.
     */
    eProsima_user_DllExport MvregEdgeAttr(
            const MvregEdgeAttr& x)
    {
                    m_id = x.m_id;

                    m_from = x.m_from;

                    m_to = x.m_to;

                    m_type = x.m_type;

                    m_attr_name = x.m_attr_name;

                    m_dk = x.m_dk;

                    m_agent_id = x.m_agent_id;

                    m_timestamp = x.m_timestamp;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MvregEdgeAttr that will be copied.
     */
    eProsima_user_DllExport MvregEdgeAttr(
            MvregEdgeAttr&& x) noexcept
    {
        m_id = x.m_id;
        m_from = x.m_from;
        m_to = x.m_to;
        m_type = std::move(x.m_type);
        m_attr_name = std::move(x.m_attr_name);
        m_dk = std::move(x.m_dk);
        m_agent_id = x.m_agent_id;
        m_timestamp = x.m_timestamp;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MvregEdgeAttr that will be copied.
     */
    eProsima_user_DllExport MvregEdgeAttr& operator =(
            const MvregEdgeAttr& x)
    {

                    m_id = x.m_id;

                    m_from = x.m_from;

                    m_to = x.m_to;

                    m_type = x.m_type;

                    m_attr_name = x.m_attr_name;

                    m_dk = x.m_dk;

                    m_agent_id = x.m_agent_id;

                    m_timestamp = x.m_timestamp;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MvregEdgeAttr that will be copied.
     */
    eProsima_user_DllExport MvregEdgeAttr& operator =(
            MvregEdgeAttr&& x) noexcept
    {

        m_id = x.m_id;
        m_from = x.m_from;
        m_to = x.m_to;
        m_type = std::move(x.m_type);
        m_attr_name = std::move(x.m_attr_name);
        m_dk = std::move(x.m_dk);
        m_agent_id = x.m_agent_id;
        m_timestamp = x.m_timestamp;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MvregEdgeAttr object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MvregEdgeAttr& x) const
    {
        return (m_id == x.m_id &&
           m_from == x.m_from &&
           m_to == x.m_to &&
           m_type == x.m_type &&
           m_attr_name == x.m_attr_name &&
           m_dk == x.m_dk &&
           m_agent_id == x.m_agent_id &&
           m_timestamp == x.m_timestamp);
    }

    /*!
     * @brief Comparison operator.
     * @param x MvregEdgeAttr object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MvregEdgeAttr& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint64_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint64_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint64_t& id()
    {
        return m_id;
    }


    /*!
     * @brief This function sets a value in member from
     * @param _from New value for member from
     */
    eProsima_user_DllExport void from(
            uint64_t _from)
    {
        m_from = _from;
    }

    /*!
     * @brief This function returns the value of member from
     * @return Value of member from
     */
    eProsima_user_DllExport uint64_t from() const
    {
        return m_from;
    }

    /*!
     * @brief This function returns a reference to member from
     * @return Reference to member from
     */
    eProsima_user_DllExport uint64_t& from()
    {
        return m_from;
    }


    /*!
     * @brief This function sets a value in member to
     * @param _to New value for member to
     */
    eProsima_user_DllExport void to(
            uint64_t _to)
    {
        m_to = _to;
    }

    /*!
     * @brief This function returns the value of member to
     * @return Value of member to
     */
    eProsima_user_DllExport uint64_t to() const
    {
        return m_to;
    }

    /*!
     * @brief This function returns a reference to member to
     * @return Reference to member to
     */
    eProsima_user_DllExport uint64_t& to()
    {
        return m_to;
    }


    /*!
     * @brief This function copies the value in member type
     * @param _type New value to be copied in member type
     */
    eProsima_user_DllExport void type(
            const std::string& _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function moves the value in member type
     * @param _type New value to be moved in member type
     */
    eProsima_user_DllExport void type(
            std::string&& _type)
    {
        m_type = std::move(_type);
    }

    /*!
     * @brief This function returns a constant reference to member type
     * @return Constant reference to member type
     */
    eProsima_user_DllExport const std::string& type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport std::string& type()
    {
        return m_type;
    }


    /*!
     * @brief This function copies the value in member attr_name
     * @param _attr_name New value to be copied in member attr_name
     */
    eProsima_user_DllExport void attr_name(
            const std::string& _attr_name)
    {
        m_attr_name = _attr_name;
    }

    /*!
     * @brief This function moves the value in member attr_name
     * @param _attr_name New value to be moved in member attr_name
     */
    eProsima_user_DllExport void attr_name(
            std::string&& _attr_name)
    {
        m_attr_name = std::move(_attr_name);
    }

    /*!
     * @brief This function returns a constant reference to member attr_name
     * @return Constant reference to member attr_name
     */
    eProsima_user_DllExport const std::string& attr_name() const
    {
        return m_attr_name;
    }

    /*!
     * @brief This function returns a reference to member attr_name
     * @return Reference to member attr_name
     */
    eProsima_user_DllExport std::string& attr_name()
    {
        return m_attr_name;
    }


    /*!
     * @brief This function copies the value in member dk
     * @param _dk New value to be copied in member dk
     */
    eProsima_user_DllExport void dk(
            const DotKernelAttr& _dk)
    {
        m_dk = _dk;
    }

    /*!
     * @brief This function moves the value in member dk
     * @param _dk New value to be moved in member dk
     */
    eProsima_user_DllExport void dk(
            DotKernelAttr&& _dk)
    {
        m_dk = std::move(_dk);
    }

    /*!
     * @brief This function returns a constant reference to member dk
     * @return Constant reference to member dk
     */
    eProsima_user_DllExport const DotKernelAttr& dk() const
    {
        return m_dk;
    }

    /*!
     * @brief This function returns a reference to member dk
     * @return Reference to member dk
     */
    eProsima_user_DllExport DotKernelAttr& dk()
    {
        return m_dk;
    }


    /*!
     * @brief This function sets a value in member agent_id
     * @param _agent_id New value for member agent_id
     */
    eProsima_user_DllExport void agent_id(
            uint32_t _agent_id)
    {
        m_agent_id = _agent_id;
    }

    /*!
     * @brief This function returns the value of member agent_id
     * @return Value of member agent_id
     */
    eProsima_user_DllExport uint32_t agent_id() const
    {
        return m_agent_id;
    }

    /*!
     * @brief This function returns a reference to member agent_id
     * @return Reference to member agent_id
     */
    eProsima_user_DllExport uint32_t& agent_id()
    {
        return m_agent_id;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }



private:

    uint64_t m_id{0};
    uint64_t m_from{0};
    uint64_t m_to{0};
    std::string m_type;
    std::string m_attr_name;
    DotKernelAttr m_dk;
    uint32_t m_agent_id{0};
    uint64_t m_timestamp{0};

};
/*!
 * @brief This class represents the structure IDLEdge defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class IDLEdge
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport IDLEdge()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~IDLEdge()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object IDLEdge that will be copied.
     */
    eProsima_user_DllExport IDLEdge(
            const IDLEdge& x)
    {
                    m_to = x.m_to;

                    m_type = x.m_type;

                    m_from = x.m_from;

                    m_attrs = x.m_attrs;

                    m_agent_id = x.m_agent_id;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object IDLEdge that will be copied.
     */
    eProsima_user_DllExport IDLEdge(
            IDLEdge&& x) noexcept
    {
        m_to = x.m_to;
        m_type = std::move(x.m_type);
        m_from = x.m_from;
        m_attrs = std::move(x.m_attrs);
        m_agent_id = x.m_agent_id;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object IDLEdge that will be copied.
     */
    eProsima_user_DllExport IDLEdge& operator =(
            const IDLEdge& x)
    {

                    m_to = x.m_to;

                    m_type = x.m_type;

                    m_from = x.m_from;

                    m_attrs = x.m_attrs;

                    m_agent_id = x.m_agent_id;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object IDLEdge that will be copied.
     */
    eProsima_user_DllExport IDLEdge& operator =(
            IDLEdge&& x) noexcept
    {

        m_to = x.m_to;
        m_type = std::move(x.m_type);
        m_from = x.m_from;
        m_attrs = std::move(x.m_attrs);
        m_agent_id = x.m_agent_id;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x IDLEdge object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const IDLEdge& x) const
    {
        return (m_to == x.m_to &&
           m_type == x.m_type &&
           m_from == x.m_from &&
           m_attrs == x.m_attrs &&
           m_agent_id == x.m_agent_id);
    }

    /*!
     * @brief Comparison operator.
     * @param x IDLEdge object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const IDLEdge& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member to
     * @param _to New value for member to
     */
    eProsima_user_DllExport void to(
            uint64_t _to)
    {
        m_to = _to;
    }

    /*!
     * @brief This function returns the value of member to
     * @return Value of member to
     */
    eProsima_user_DllExport uint64_t to() const
    {
        return m_to;
    }

    /*!
     * @brief This function returns a reference to member to
     * @return Reference to member to
     */
    eProsima_user_DllExport uint64_t& to()
    {
        return m_to;
    }


    /*!
     * @brief This function copies the value in member type
     * @param _type New value to be copied in member type
     */
    eProsima_user_DllExport void type(
            const std::string& _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function moves the value in member type
     * @param _type New value to be moved in member type
     */
    eProsima_user_DllExport void type(
            std::string&& _type)
    {
        m_type = std::move(_type);
    }

    /*!
     * @brief This function returns a constant reference to member type
     * @return Constant reference to member type
     */
    eProsima_user_DllExport const std::string& type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport std::string& type()
    {
        return m_type;
    }


    /*!
     * @brief This function sets a value in member from
     * @param _from New value for member from
     */
    eProsima_user_DllExport void from(
            uint64_t _from)
    {
        m_from = _from;
    }

    /*!
     * @brief This function returns the value of member from
     * @return Value of member from
     */
    eProsima_user_DllExport uint64_t from() const
    {
        return m_from;
    }

    /*!
     * @brief This function returns a reference to member from
     * @return Reference to member from
     */
    eProsima_user_DllExport uint64_t& from()
    {
        return m_from;
    }


    /*!
     * @brief This function copies the value in member attrs
     * @param _attrs New value to be copied in member attrs
     */
    eProsima_user_DllExport void attrs(
            const std::map<std::string, MvregEdgeAttr>& _attrs)
    {
        m_attrs = _attrs;
    }

    /*!
     * @brief This function moves the value in member attrs
     * @param _attrs New value to be moved in member attrs
     */
    eProsima_user_DllExport void attrs(
            std::map<std::string, MvregEdgeAttr>&& _attrs)
    {
        m_attrs = std::move(_attrs);
    }

    /*!
     * @brief This function returns a constant reference to member attrs
     * @return Constant reference to member attrs
     */
    eProsima_user_DllExport const std::map<std::string, MvregEdgeAttr>& attrs() const
    {
        return m_attrs;
    }

    /*!
     * @brief This function returns a reference to member attrs
     * @return Reference to member attrs
     */
    eProsima_user_DllExport std::map<std::string, MvregEdgeAttr>& attrs()
    {
        return m_attrs;
    }


    /*!
     * @brief This function sets a value in member agent_id
     * @param _agent_id New value for member agent_id
     */
    eProsima_user_DllExport void agent_id(
            uint32_t _agent_id)
    {
        m_agent_id = _agent_id;
    }

    /*!
     * @brief This function returns the value of member agent_id
     * @return Value of member agent_id
     */
    eProsima_user_DllExport uint32_t agent_id() const
    {
        return m_agent_id;
    }

    /*!
     * @brief This function returns a reference to member agent_id
     * @return Reference to member agent_id
     */
    eProsima_user_DllExport uint32_t& agent_id()
    {
        return m_agent_id;
    }



private:

    uint64_t m_to{0};
    std::string m_type;
    uint64_t m_from{0};
    std::map<std::string, MvregEdgeAttr> m_attrs;
    uint32_t m_agent_id{0};

};
/*!
 * @brief This class represents the structure EdgeKey defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class EdgeKey
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport EdgeKey()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~EdgeKey()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object EdgeKey that will be copied.
     */
    eProsima_user_DllExport EdgeKey(
            const EdgeKey& x)
    {
                    m_to = x.m_to;

                    m_type = x.m_type;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object EdgeKey that will be copied.
     */
    eProsima_user_DllExport EdgeKey(
            EdgeKey&& x) noexcept
    {
        m_to = x.m_to;
        m_type = std::move(x.m_type);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object EdgeKey that will be copied.
     */
    eProsima_user_DllExport EdgeKey& operator =(
            const EdgeKey& x)
    {

                    m_to = x.m_to;

                    m_type = x.m_type;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object EdgeKey that will be copied.
     */
    eProsima_user_DllExport EdgeKey& operator =(
            EdgeKey&& x) noexcept
    {

        m_to = x.m_to;
        m_type = std::move(x.m_type);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x EdgeKey object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const EdgeKey& x) const
    {
        return (m_to == x.m_to &&
           m_type == x.m_type);
    }

    /*!
     * @brief Comparison operator.
     * @param x EdgeKey object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const EdgeKey& x) const
    {
        return !(*this == x);
    }

    eProsima_user_DllExport bool operator<(
        const EdgeKey &rhs) const
    {
        if (m_to < rhs.m_to)
            return true;
        if (rhs.m_to < m_to)
            return false;
        return m_type < rhs.m_type;
    }

    /*!
     * @brief This function sets a value in member to
     * @param _to New value for member to
     */
    eProsima_user_DllExport void to(
            uint64_t _to)
    {
        m_to = _to;
    }

    /*!
     * @brief This function returns the value of member to
     * @return Value of member to
     */
    eProsima_user_DllExport uint64_t to() const
    {
        return m_to;
    }

    /*!
     * @brief This function returns a reference to member to
     * @return Reference to member to
     */
    eProsima_user_DllExport uint64_t& to()
    {
        return m_to;
    }


    /*!
     * @brief This function copies the value in member type
     * @param _type New value to be copied in member type
     */
    eProsima_user_DllExport void type(
            const std::string& _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function moves the value in member type
     * @param _type New value to be moved in member type
     */
    eProsima_user_DllExport void type(
            std::string&& _type)
    {
        m_type = std::move(_type);
    }

    /*!
     * @brief This function returns a constant reference to member type
     * @return Constant reference to member type
     */
    eProsima_user_DllExport const std::string& type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport std::string& type()
    {
        return m_type;
    }



private:

    uint64_t m_to{0};
    std::string m_type;

};
/*!
 * @brief This class represents the structure MvregNodeAttr defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class MvregNodeAttr
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MvregNodeAttr()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MvregNodeAttr()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MvregNodeAttr that will be copied.
     */
    eProsima_user_DllExport MvregNodeAttr(
            const MvregNodeAttr& x)
    {
                    m_id = x.m_id;

                    m_node = x.m_node;

                    m_attr_name = x.m_attr_name;

                    m_dk = x.m_dk;

                    m_agent_id = x.m_agent_id;

                    m_timestamp = x.m_timestamp;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MvregNodeAttr that will be copied.
     */
    eProsima_user_DllExport MvregNodeAttr(
            MvregNodeAttr&& x) noexcept
    {
        m_id = x.m_id;
        m_node = x.m_node;
        m_attr_name = std::move(x.m_attr_name);
        m_dk = std::move(x.m_dk);
        m_agent_id = x.m_agent_id;
        m_timestamp = x.m_timestamp;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MvregNodeAttr that will be copied.
     */
    eProsima_user_DllExport MvregNodeAttr& operator =(
            const MvregNodeAttr& x)
    {

                    m_id = x.m_id;

                    m_node = x.m_node;

                    m_attr_name = x.m_attr_name;

                    m_dk = x.m_dk;

                    m_agent_id = x.m_agent_id;

                    m_timestamp = x.m_timestamp;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MvregNodeAttr that will be copied.
     */
    eProsima_user_DllExport MvregNodeAttr& operator =(
            MvregNodeAttr&& x) noexcept
    {

        m_id = x.m_id;
        m_node = x.m_node;
        m_attr_name = std::move(x.m_attr_name);
        m_dk = std::move(x.m_dk);
        m_agent_id = x.m_agent_id;
        m_timestamp = x.m_timestamp;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MvregNodeAttr object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MvregNodeAttr& x) const
    {
        return (m_id == x.m_id &&
           m_node == x.m_node &&
           m_attr_name == x.m_attr_name &&
           m_dk == x.m_dk &&
           m_agent_id == x.m_agent_id &&
           m_timestamp == x.m_timestamp);
    }

    /*!
     * @brief Comparison operator.
     * @param x MvregNodeAttr object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MvregNodeAttr& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint64_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint64_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint64_t& id()
    {
        return m_id;
    }


    /*!
     * @brief This function sets a value in member node
     * @param _node New value for member node
     */
    eProsima_user_DllExport void node(
            uint64_t _node)
    {
        m_node = _node;
    }

    /*!
     * @brief This function returns the value of member node
     * @return Value of member node
     */
    eProsima_user_DllExport uint64_t node() const
    {
        return m_node;
    }

    /*!
     * @brief This function returns a reference to member node
     * @return Reference to member node
     */
    eProsima_user_DllExport uint64_t& node()
    {
        return m_node;
    }


    /*!
     * @brief This function copies the value in member attr_name
     * @param _attr_name New value to be copied in member attr_name
     */
    eProsima_user_DllExport void attr_name(
            const std::string& _attr_name)
    {
        m_attr_name = _attr_name;
    }

    /*!
     * @brief This function moves the value in member attr_name
     * @param _attr_name New value to be moved in member attr_name
     */
    eProsima_user_DllExport void attr_name(
            std::string&& _attr_name)
    {
        m_attr_name = std::move(_attr_name);
    }

    /*!
     * @brief This function returns a constant reference to member attr_name
     * @return Constant reference to member attr_name
     */
    eProsima_user_DllExport const std::string& attr_name() const
    {
        return m_attr_name;
    }

    /*!
     * @brief This function returns a reference to member attr_name
     * @return Reference to member attr_name
     */
    eProsima_user_DllExport std::string& attr_name()
    {
        return m_attr_name;
    }


    /*!
     * @brief This function copies the value in member dk
     * @param _dk New value to be copied in member dk
     */
    eProsima_user_DllExport void dk(
            const DotKernelAttr& _dk)
    {
        m_dk = _dk;
    }

    /*!
     * @brief This function moves the value in member dk
     * @param _dk New value to be moved in member dk
     */
    eProsima_user_DllExport void dk(
            DotKernelAttr&& _dk)
    {
        m_dk = std::move(_dk);
    }

    /*!
     * @brief This function returns a constant reference to member dk
     * @return Constant reference to member dk
     */
    eProsima_user_DllExport const DotKernelAttr& dk() const
    {
        return m_dk;
    }

    /*!
     * @brief This function returns a reference to member dk
     * @return Reference to member dk
     */
    eProsima_user_DllExport DotKernelAttr& dk()
    {
        return m_dk;
    }


    /*!
     * @brief This function sets a value in member agent_id
     * @param _agent_id New value for member agent_id
     */
    eProsima_user_DllExport void agent_id(
            uint32_t _agent_id)
    {
        m_agent_id = _agent_id;
    }

    /*!
     * @brief This function returns the value of member agent_id
     * @return Value of member agent_id
     */
    eProsima_user_DllExport uint32_t agent_id() const
    {
        return m_agent_id;
    }

    /*!
     * @brief This function returns a reference to member agent_id
     * @return Reference to member agent_id
     */
    eProsima_user_DllExport uint32_t& agent_id()
    {
        return m_agent_id;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }



private:

    uint64_t m_id{0};
    uint64_t m_node{0};
    std::string m_attr_name;
    DotKernelAttr m_dk;
    uint32_t m_agent_id{0};
    uint64_t m_timestamp{0};

};
/*!
 * @brief This class represents the structure DotKernelEdge defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class DotKernelEdge
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DotKernelEdge()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DotKernelEdge()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DotKernelEdge that will be copied.
     */
    eProsima_user_DllExport DotKernelEdge(
            const DotKernelEdge& x)
    {
                    m_ds = x.m_ds;

                    m_cbase = x.m_cbase;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DotKernelEdge that will be copied.
     */
    eProsima_user_DllExport DotKernelEdge(
            DotKernelEdge&& x) noexcept
    {
        m_ds = std::move(x.m_ds);
        m_cbase = std::move(x.m_cbase);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DotKernelEdge that will be copied.
     */
    eProsima_user_DllExport DotKernelEdge& operator =(
            const DotKernelEdge& x)
    {

                    m_ds = x.m_ds;

                    m_cbase = x.m_cbase;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DotKernelEdge that will be copied.
     */
    eProsima_user_DllExport DotKernelEdge& operator =(
            DotKernelEdge&& x) noexcept
    {

        m_ds = std::move(x.m_ds);
        m_cbase = std::move(x.m_cbase);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x DotKernelEdge object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DotKernelEdge& x) const
    {
        return (m_ds == x.m_ds &&
           m_cbase == x.m_cbase);
    }

    /*!
     * @brief Comparison operator.
     * @param x DotKernelEdge object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DotKernelEdge& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member ds
     * @param _ds New value to be copied in member ds
     */
    eProsima_user_DllExport void ds(
            const std::map<PairInt, IDLEdge>& _ds)
    {
        m_ds = _ds;
    }

    /*!
     * @brief This function moves the value in member ds
     * @param _ds New value to be moved in member ds
     */
    eProsima_user_DllExport void ds(
            std::map<PairInt, IDLEdge>&& _ds)
    {
        m_ds = std::move(_ds);
    }

    /*!
     * @brief This function returns a constant reference to member ds
     * @return Constant reference to member ds
     */
    eProsima_user_DllExport const std::map<PairInt, IDLEdge>& ds() const
    {
        return m_ds;
    }

    /*!
     * @brief This function returns a reference to member ds
     * @return Reference to member ds
     */
    eProsima_user_DllExport std::map<PairInt, IDLEdge>& ds()
    {
        return m_ds;
    }


    /*!
     * @brief This function copies the value in member cbase
     * @param _cbase New value to be copied in member cbase
     */
    eProsima_user_DllExport void cbase(
            const DotContext& _cbase)
    {
        m_cbase = _cbase;
    }

    /*!
     * @brief This function moves the value in member cbase
     * @param _cbase New value to be moved in member cbase
     */
    eProsima_user_DllExport void cbase(
            DotContext&& _cbase)
    {
        m_cbase = std::move(_cbase);
    }

    /*!
     * @brief This function returns a constant reference to member cbase
     * @return Constant reference to member cbase
     */
    eProsima_user_DllExport const DotContext& cbase() const
    {
        return m_cbase;
    }

    /*!
     * @brief This function returns a reference to member cbase
     * @return Reference to member cbase
     */
    eProsima_user_DllExport DotContext& cbase()
    {
        return m_cbase;
    }



private:

    std::map<PairInt, IDLEdge> m_ds;
    DotContext m_cbase;

};
/*!
 * @brief This class represents the structure MvregEdge defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class MvregEdge
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MvregEdge()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MvregEdge()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MvregEdge that will be copied.
     */
    eProsima_user_DllExport MvregEdge(
            const MvregEdge& x)
    {
                    m_id = x.m_id;

                    m_from = x.m_from;

                    m_to = x.m_to;

                    m_type = x.m_type;

                    m_dk = x.m_dk;

                    m_agent_id = x.m_agent_id;

                    m_timestamp = x.m_timestamp;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MvregEdge that will be copied.
     */
    eProsima_user_DllExport MvregEdge(
            MvregEdge&& x) noexcept
    {
        m_id = x.m_id;
        m_from = x.m_from;
        m_to = x.m_to;
        m_type = std::move(x.m_type);
        m_dk = std::move(x.m_dk);
        m_agent_id = x.m_agent_id;
        m_timestamp = x.m_timestamp;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MvregEdge that will be copied.
     */
    eProsima_user_DllExport MvregEdge& operator =(
            const MvregEdge& x)
    {

                    m_id = x.m_id;

                    m_from = x.m_from;

                    m_to = x.m_to;

                    m_type = x.m_type;

                    m_dk = x.m_dk;

                    m_agent_id = x.m_agent_id;

                    m_timestamp = x.m_timestamp;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MvregEdge that will be copied.
     */
    eProsima_user_DllExport MvregEdge& operator =(
            MvregEdge&& x) noexcept
    {

        m_id = x.m_id;
        m_from = x.m_from;
        m_to = x.m_to;
        m_type = std::move(x.m_type);
        m_dk = std::move(x.m_dk);
        m_agent_id = x.m_agent_id;
        m_timestamp = x.m_timestamp;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MvregEdge object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MvregEdge& x) const
    {
        return (m_id == x.m_id &&
           m_from == x.m_from &&
           m_to == x.m_to &&
           m_type == x.m_type &&
           m_dk == x.m_dk &&
           m_agent_id == x.m_agent_id &&
           m_timestamp == x.m_timestamp);
    }

    /*!
     * @brief Comparison operator.
     * @param x MvregEdge object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MvregEdge& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint64_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint64_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint64_t& id()
    {
        return m_id;
    }


    /*!
     * @brief This function sets a value in member from
     * @param _from New value for member from
     */
    eProsima_user_DllExport void from(
            uint64_t _from)
    {
        m_from = _from;
    }

    /*!
     * @brief This function returns the value of member from
     * @return Value of member from
     */
    eProsima_user_DllExport uint64_t from() const
    {
        return m_from;
    }

    /*!
     * @brief This function returns a reference to member from
     * @return Reference to member from
     */
    eProsima_user_DllExport uint64_t& from()
    {
        return m_from;
    }


    /*!
     * @brief This function sets a value in member to
     * @param _to New value for member to
     */
    eProsima_user_DllExport void to(
            uint64_t _to)
    {
        m_to = _to;
    }

    /*!
     * @brief This function returns the value of member to
     * @return Value of member to
     */
    eProsima_user_DllExport uint64_t to() const
    {
        return m_to;
    }

    /*!
     * @brief This function returns a reference to member to
     * @return Reference to member to
     */
    eProsima_user_DllExport uint64_t& to()
    {
        return m_to;
    }


    /*!
     * @brief This function copies the value in member type
     * @param _type New value to be copied in member type
     */
    eProsima_user_DllExport void type(
            const std::string& _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function moves the value in member type
     * @param _type New value to be moved in member type
     */
    eProsima_user_DllExport void type(
            std::string&& _type)
    {
        m_type = std::move(_type);
    }

    /*!
     * @brief This function returns a constant reference to member type
     * @return Constant reference to member type
     */
    eProsima_user_DllExport const std::string& type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport std::string& type()
    {
        return m_type;
    }


    /*!
     * @brief This function copies the value in member dk
     * @param _dk New value to be copied in member dk
     */
    eProsima_user_DllExport void dk(
            const DotKernelEdge& _dk)
    {
        m_dk = _dk;
    }

    /*!
     * @brief This function moves the value in member dk
     * @param _dk New value to be moved in member dk
     */
    eProsima_user_DllExport void dk(
            DotKernelEdge&& _dk)
    {
        m_dk = std::move(_dk);
    }

    /*!
     * @brief This function returns a constant reference to member dk
     * @return Constant reference to member dk
     */
    eProsima_user_DllExport const DotKernelEdge& dk() const
    {
        return m_dk;
    }

    /*!
     * @brief This function returns a reference to member dk
     * @return Reference to member dk
     */
    eProsima_user_DllExport DotKernelEdge& dk()
    {
        return m_dk;
    }


    /*!
     * @brief This function sets a value in member agent_id
     * @param _agent_id New value for member agent_id
     */
    eProsima_user_DllExport void agent_id(
            uint32_t _agent_id)
    {
        m_agent_id = _agent_id;
    }

    /*!
     * @brief This function returns the value of member agent_id
     * @return Value of member agent_id
     */
    eProsima_user_DllExport uint32_t agent_id() const
    {
        return m_agent_id;
    }

    /*!
     * @brief This function returns a reference to member agent_id
     * @return Reference to member agent_id
     */
    eProsima_user_DllExport uint32_t& agent_id()
    {
        return m_agent_id;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }



private:

    uint64_t m_id{0};
    uint64_t m_from{0};
    uint64_t m_to{0};
    std::string m_type;
    DotKernelEdge m_dk;
    uint32_t m_agent_id{0};
    uint64_t m_timestamp{0};

};
/*!
 * @brief This class represents the structure IDLNode defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class IDLNode
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport IDLNode()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~IDLNode()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object IDLNode that will be copied.
     */
    eProsima_user_DllExport IDLNode(
            const IDLNode& x)
    {
                    m_type = x.m_type;

                    m_name = x.m_name;

                    m_id = x.m_id;

                    m_agent_id = x.m_agent_id;

                    m_attrs = x.m_attrs;

                    m_fano = x.m_fano;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object IDLNode that will be copied.
     */
    eProsima_user_DllExport IDLNode(
            IDLNode&& x) noexcept
    {
        m_type = std::move(x.m_type);
        m_name = std::move(x.m_name);
        m_id = x.m_id;
        m_agent_id = x.m_agent_id;
        m_attrs = std::move(x.m_attrs);
        m_fano = std::move(x.m_fano);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object IDLNode that will be copied.
     */
    eProsima_user_DllExport IDLNode& operator =(
            const IDLNode& x)
    {

                    m_type = x.m_type;

                    m_name = x.m_name;

                    m_id = x.m_id;

                    m_agent_id = x.m_agent_id;

                    m_attrs = x.m_attrs;

                    m_fano = x.m_fano;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object IDLNode that will be copied.
     */
    eProsima_user_DllExport IDLNode& operator =(
            IDLNode&& x) noexcept
    {

        m_type = std::move(x.m_type);
        m_name = std::move(x.m_name);
        m_id = x.m_id;
        m_agent_id = x.m_agent_id;
        m_attrs = std::move(x.m_attrs);
        m_fano = std::move(x.m_fano);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x IDLNode object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const IDLNode& x) const
    {
        return (m_type == x.m_type &&
           m_name == x.m_name &&
           m_id == x.m_id &&
           m_agent_id == x.m_agent_id &&
           m_attrs == x.m_attrs &&
           m_fano == x.m_fano);
    }

    /*!
     * @brief Comparison operator.
     * @param x IDLNode object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const IDLNode& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member type
     * @param _type New value to be copied in member type
     */
    eProsima_user_DllExport void type(
            const std::string& _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function moves the value in member type
     * @param _type New value to be moved in member type
     */
    eProsima_user_DllExport void type(
            std::string&& _type)
    {
        m_type = std::move(_type);
    }

    /*!
     * @brief This function returns a constant reference to member type
     * @return Constant reference to member type
     */
    eProsima_user_DllExport const std::string& type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport std::string& type()
    {
        return m_type;
    }


    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name)
    {
        m_name = _name;
    }

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name)
    {
        m_name = std::move(_name);
    }

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const
    {
        return m_name;
    }

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name()
    {
        return m_name;
    }


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint64_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint64_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint64_t& id()
    {
        return m_id;
    }


    /*!
     * @brief This function sets a value in member agent_id
     * @param _agent_id New value for member agent_id
     */
    eProsima_user_DllExport void agent_id(
            uint32_t _agent_id)
    {
        m_agent_id = _agent_id;
    }

    /*!
     * @brief This function returns the value of member agent_id
     * @return Value of member agent_id
     */
    eProsima_user_DllExport uint32_t agent_id() const
    {
        return m_agent_id;
    }

    /*!
     * @brief This function returns a reference to member agent_id
     * @return Reference to member agent_id
     */
    eProsima_user_DllExport uint32_t& agent_id()
    {
        return m_agent_id;
    }


    /*!
     * @brief This function copies the value in member attrs
     * @param _attrs New value to be copied in member attrs
     */
    eProsima_user_DllExport void attrs(
            const std::map<std::string, MvregNodeAttr>& _attrs)
    {
        m_attrs = _attrs;
    }

    /*!
     * @brief This function moves the value in member attrs
     * @param _attrs New value to be moved in member attrs
     */
    eProsima_user_DllExport void attrs(
            std::map<std::string, MvregNodeAttr>&& _attrs)
    {
        m_attrs = std::move(_attrs);
    }

    /*!
     * @brief This function returns a constant reference to member attrs
     * @return Constant reference to member attrs
     */
    eProsima_user_DllExport const std::map<std::string, MvregNodeAttr>& attrs() const
    {
        return m_attrs;
    }

    /*!
     * @brief This function returns a reference to member attrs
     * @return Reference to member attrs
     */
    eProsima_user_DllExport std::map<std::string, MvregNodeAttr>& attrs()
    {
        return m_attrs;
    }


    /*!
     * @brief This function copies the value in member fano
     * @param _fano New value to be copied in member fano
     */
    eProsima_user_DllExport void fano(
            const std::map<EdgeKey, MvregEdge>& _fano)
    {
        m_fano = _fano;
    }

    /*!
     * @brief This function moves the value in member fano
     * @param _fano New value to be moved in member fano
     */
    eProsima_user_DllExport void fano(
            std::map<EdgeKey, MvregEdge>&& _fano)
    {
        m_fano = std::move(_fano);
    }

    /*!
     * @brief This function returns a constant reference to member fano
     * @return Constant reference to member fano
     */
    eProsima_user_DllExport const std::map<EdgeKey, MvregEdge>& fano() const
    {
        return m_fano;
    }

    /*!
     * @brief This function returns a reference to member fano
     * @return Reference to member fano
     */
    eProsima_user_DllExport std::map<EdgeKey, MvregEdge>& fano()
    {
        return m_fano;
    }



private:

    std::string m_type;
    std::string m_name;
    uint64_t m_id{0};
    uint32_t m_agent_id{0};
    std::map<std::string, MvregNodeAttr> m_attrs;
    std::map<EdgeKey, MvregEdge> m_fano;

};
/*!
 * @brief This class represents the structure GraphRequest defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class GraphRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GraphRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GraphRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object GraphRequest that will be copied.
     */
    eProsima_user_DllExport GraphRequest(
            const GraphRequest& x)
    {
                    m_from = x.m_from;

                    m_id = x.m_id;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object GraphRequest that will be copied.
     */
    eProsima_user_DllExport GraphRequest(
            GraphRequest&& x) noexcept
    {
        m_from = std::move(x.m_from);
        m_id = x.m_id;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object GraphRequest that will be copied.
     */
    eProsima_user_DllExport GraphRequest& operator =(
            const GraphRequest& x)
    {

                    m_from = x.m_from;

                    m_id = x.m_id;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object GraphRequest that will be copied.
     */
    eProsima_user_DllExport GraphRequest& operator =(
            GraphRequest&& x) noexcept
    {

        m_from = std::move(x.m_from);
        m_id = x.m_id;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x GraphRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GraphRequest& x) const
    {
        return (m_from == x.m_from &&
           m_id == x.m_id);
    }

    /*!
     * @brief Comparison operator.
     * @param x GraphRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GraphRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member from
     * @param _from New value to be copied in member from
     */
    eProsima_user_DllExport void from(
            const std::string& _from)
    {
        m_from = _from;
    }

    /*!
     * @brief This function moves the value in member from
     * @param _from New value to be moved in member from
     */
    eProsima_user_DllExport void from(
            std::string&& _from)
    {
        m_from = std::move(_from);
    }

    /*!
     * @brief This function returns a constant reference to member from
     * @return Constant reference to member from
     */
    eProsima_user_DllExport const std::string& from() const
    {
        return m_from;
    }

    /*!
     * @brief This function returns a reference to member from
     * @return Reference to member from
     */
    eProsima_user_DllExport std::string& from()
    {
        return m_from;
    }


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            int32_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport int32_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport int32_t& id()
    {
        return m_id;
    }



private:

    std::string m_from;
    int32_t m_id{0};

};
/*!
 * @brief This class represents the structure DotKernel defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class DotKernel
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DotKernel()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DotKernel()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DotKernel that will be copied.
     */
    eProsima_user_DllExport DotKernel(
            const DotKernel& x)
    {
                    m_ds = x.m_ds;

                    m_cbase = x.m_cbase;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DotKernel that will be copied.
     */
    eProsima_user_DllExport DotKernel(
            DotKernel&& x) noexcept
    {
        m_ds = std::move(x.m_ds);
        m_cbase = std::move(x.m_cbase);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DotKernel that will be copied.
     */
    eProsima_user_DllExport DotKernel& operator =(
            const DotKernel& x)
    {

                    m_ds = x.m_ds;

                    m_cbase = x.m_cbase;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DotKernel that will be copied.
     */
    eProsima_user_DllExport DotKernel& operator =(
            DotKernel&& x) noexcept
    {

        m_ds = std::move(x.m_ds);
        m_cbase = std::move(x.m_cbase);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x DotKernel object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DotKernel& x) const
    {
        return (m_ds == x.m_ds &&
           m_cbase == x.m_cbase);
    }

    /*!
     * @brief Comparison operator.
     * @param x DotKernel object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DotKernel& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member ds
     * @param _ds New value to be copied in member ds
     */
    eProsima_user_DllExport void ds(
            const std::map<PairInt, IDLNode>& _ds)
    {
        m_ds = _ds;
    }

    /*!
     * @brief This function moves the value in member ds
     * @param _ds New value to be moved in member ds
     */
    eProsima_user_DllExport void ds(
            std::map<PairInt, IDLNode>&& _ds)
    {
        m_ds = std::move(_ds);
    }

    /*!
     * @brief This function returns a constant reference to member ds
     * @return Constant reference to member ds
     */
    eProsima_user_DllExport const std::map<PairInt, IDLNode>& ds() const
    {
        return m_ds;
    }

    /*!
     * @brief This function returns a reference to member ds
     * @return Reference to member ds
     */
    eProsima_user_DllExport std::map<PairInt, IDLNode>& ds()
    {
        return m_ds;
    }


    /*!
     * @brief This function copies the value in member cbase
     * @param _cbase New value to be copied in member cbase
     */
    eProsima_user_DllExport void cbase(
            const DotContext& _cbase)
    {
        m_cbase = _cbase;
    }

    /*!
     * @brief This function moves the value in member cbase
     * @param _cbase New value to be moved in member cbase
     */
    eProsima_user_DllExport void cbase(
            DotContext&& _cbase)
    {
        m_cbase = std::move(_cbase);
    }

    /*!
     * @brief This function returns a constant reference to member cbase
     * @return Constant reference to member cbase
     */
    eProsima_user_DllExport const DotContext& cbase() const
    {
        return m_cbase;
    }

    /*!
     * @brief This function returns a reference to member cbase
     * @return Reference to member cbase
     */
    eProsima_user_DllExport DotContext& cbase()
    {
        return m_cbase;
    }



private:

    std::map<PairInt, IDLNode> m_ds;
    DotContext m_cbase;

};
/*!
 * @brief This class represents the structure MvregNode defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class MvregNode
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MvregNode()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MvregNode()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MvregNode that will be copied.
     */
    eProsima_user_DllExport MvregNode(
            const MvregNode& x)
    {
                    m_id = x.m_id;

                    m_dk = x.m_dk;

                    m_agent_id = x.m_agent_id;

                    m_timestamp = x.m_timestamp;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MvregNode that will be copied.
     */
    eProsima_user_DllExport MvregNode(
            MvregNode&& x) noexcept
    {
        m_id = x.m_id;
        m_dk = std::move(x.m_dk);
        m_agent_id = x.m_agent_id;
        m_timestamp = x.m_timestamp;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MvregNode that will be copied.
     */
    eProsima_user_DllExport MvregNode& operator =(
            const MvregNode& x)
    {

                    m_id = x.m_id;

                    m_dk = x.m_dk;

                    m_agent_id = x.m_agent_id;

                    m_timestamp = x.m_timestamp;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MvregNode that will be copied.
     */
    eProsima_user_DllExport MvregNode& operator =(
            MvregNode&& x) noexcept
    {

        m_id = x.m_id;
        m_dk = std::move(x.m_dk);
        m_agent_id = x.m_agent_id;
        m_timestamp = x.m_timestamp;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MvregNode object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MvregNode& x) const
    {
        return (m_id == x.m_id &&
           m_dk == x.m_dk &&
           m_agent_id == x.m_agent_id &&
           m_timestamp == x.m_timestamp);
    }

    /*!
     * @brief Comparison operator.
     * @param x MvregNode object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MvregNode& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint64_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint64_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint64_t& id()
    {
        return m_id;
    }


    /*!
     * @brief This function copies the value in member dk
     * @param _dk New value to be copied in member dk
     */
    eProsima_user_DllExport void dk(
            const DotKernel& _dk)
    {
        m_dk = _dk;
    }

    /*!
     * @brief This function moves the value in member dk
     * @param _dk New value to be moved in member dk
     */
    eProsima_user_DllExport void dk(
            DotKernel&& _dk)
    {
        m_dk = std::move(_dk);
    }

    /*!
     * @brief This function returns a constant reference to member dk
     * @return Constant reference to member dk
     */
    eProsima_user_DllExport const DotKernel& dk() const
    {
        return m_dk;
    }

    /*!
     * @brief This function returns a reference to member dk
     * @return Reference to member dk
     */
    eProsima_user_DllExport DotKernel& dk()
    {
        return m_dk;
    }


    /*!
     * @brief This function sets a value in member agent_id
     * @param _agent_id New value for member agent_id
     */
    eProsima_user_DllExport void agent_id(
            uint32_t _agent_id)
    {
        m_agent_id = _agent_id;
    }

    /*!
     * @brief This function returns the value of member agent_id
     * @return Value of member agent_id
     */
    eProsima_user_DllExport uint32_t agent_id() const
    {
        return m_agent_id;
    }

    /*!
     * @brief This function returns a reference to member agent_id
     * @return Reference to member agent_id
     */
    eProsima_user_DllExport uint32_t& agent_id()
    {
        return m_agent_id;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }



private:

    uint64_t m_id{0};
    DotKernel m_dk;
    uint32_t m_agent_id{0};
    uint64_t m_timestamp{0};

};
/*!
 * @brief This class represents the structure OrMap defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class OrMap
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OrMap()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OrMap()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OrMap that will be copied.
     */
    eProsima_user_DllExport OrMap(
            const OrMap& x)
    {
                    m_to_id = x.m_to_id;

                    m_id = x.m_id;

                    m_m = x.m_m;

                    m_cbase = x.m_cbase;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OrMap that will be copied.
     */
    eProsima_user_DllExport OrMap(
            OrMap&& x) noexcept
    {
        m_to_id = x.m_to_id;
        m_id = x.m_id;
        m_m = std::move(x.m_m);
        m_cbase = std::move(x.m_cbase);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OrMap that will be copied.
     */
    eProsima_user_DllExport OrMap& operator =(
            const OrMap& x)
    {

                    m_to_id = x.m_to_id;

                    m_id = x.m_id;

                    m_m = x.m_m;

                    m_cbase = x.m_cbase;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OrMap that will be copied.
     */
    eProsima_user_DllExport OrMap& operator =(
            OrMap&& x) noexcept
    {

        m_to_id = x.m_to_id;
        m_id = x.m_id;
        m_m = std::move(x.m_m);
        m_cbase = std::move(x.m_cbase);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x OrMap object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OrMap& x) const
    {
        return (m_to_id == x.m_to_id &&
           m_id == x.m_id &&
           m_m == x.m_m &&
           m_cbase == x.m_cbase);
    }

    /*!
     * @brief Comparison operator.
     * @param x OrMap object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OrMap& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member to_id
     * @param _to_id New value for member to_id
     */
    eProsima_user_DllExport void to_id(
            uint32_t _to_id)
    {
        m_to_id = _to_id;
    }

    /*!
     * @brief This function returns the value of member to_id
     * @return Value of member to_id
     */
    eProsima_user_DllExport uint32_t to_id() const
    {
        return m_to_id;
    }

    /*!
     * @brief This function returns a reference to member to_id
     * @return Reference to member to_id
     */
    eProsima_user_DllExport uint32_t& to_id()
    {
        return m_to_id;
    }


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint32_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint32_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint32_t& id()
    {
        return m_id;
    }


    /*!
     * @brief This function copies the value in member m
     * @param _m New value to be copied in member m
     */
    eProsima_user_DllExport void m(
            const std::map<uint64_t, MvregNode>& _m)
    {
        m_m = _m;
    }

    /*!
     * @brief This function moves the value in member m
     * @param _m New value to be moved in member m
     */
    eProsima_user_DllExport void m(
            std::map<uint64_t, MvregNode>&& _m)
    {
        m_m = std::move(_m);
    }

    /*!
     * @brief This function returns a constant reference to member m
     * @return Constant reference to member m
     */
    eProsima_user_DllExport const std::map<uint64_t, MvregNode>& m() const
    {
        return m_m;
    }

    /*!
     * @brief This function returns a reference to member m
     * @return Reference to member m
     */
    eProsima_user_DllExport std::map<uint64_t, MvregNode>& m()
    {
        return m_m;
    }


    /*!
     * @brief This function copies the value in member cbase
     * @param _cbase New value to be copied in member cbase
     */
    eProsima_user_DllExport void cbase(
            const DotContext& _cbase)
    {
        m_cbase = _cbase;
    }

    /*!
     * @brief This function moves the value in member cbase
     * @param _cbase New value to be moved in member cbase
     */
    eProsima_user_DllExport void cbase(
            DotContext&& _cbase)
    {
        m_cbase = std::move(_cbase);
    }

    /*!
     * @brief This function returns a constant reference to member cbase
     * @return Constant reference to member cbase
     */
    eProsima_user_DllExport const DotContext& cbase() const
    {
        return m_cbase;
    }

    /*!
     * @brief This function returns a reference to member cbase
     * @return Reference to member cbase
     */
    eProsima_user_DllExport DotContext& cbase()
    {
        return m_cbase;
    }



private:

    uint32_t m_to_id{0};
    uint32_t m_id{0};
    std::map<uint64_t, MvregNode> m_m;
    DotContext m_cbase;

};
/*!
 * @brief This class represents the structure MvregEdgeAttrVec defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class MvregEdgeAttrVec
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MvregEdgeAttrVec()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MvregEdgeAttrVec()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MvregEdgeAttrVec that will be copied.
     */
    eProsima_user_DllExport MvregEdgeAttrVec(
            const MvregEdgeAttrVec& x)
    {
                    m_vec = x.m_vec;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MvregEdgeAttrVec that will be copied.
     */
    eProsima_user_DllExport MvregEdgeAttrVec(
            MvregEdgeAttrVec&& x) noexcept
    {
        m_vec = std::move(x.m_vec);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MvregEdgeAttrVec that will be copied.
     */
    eProsima_user_DllExport MvregEdgeAttrVec& operator =(
            const MvregEdgeAttrVec& x)
    {

                    m_vec = x.m_vec;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MvregEdgeAttrVec that will be copied.
     */
    eProsima_user_DllExport MvregEdgeAttrVec& operator =(
            MvregEdgeAttrVec&& x) noexcept
    {

        m_vec = std::move(x.m_vec);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MvregEdgeAttrVec object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MvregEdgeAttrVec& x) const
    {
        return (m_vec == x.m_vec);
    }

    /*!
     * @brief Comparison operator.
     * @param x MvregEdgeAttrVec object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MvregEdgeAttrVec& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member vec
     * @param _vec New value to be copied in member vec
     */
    eProsima_user_DllExport void vec(
            const std::vector<MvregEdgeAttr>& _vec)
    {
        m_vec = _vec;
    }

    /*!
     * @brief This function moves the value in member vec
     * @param _vec New value to be moved in member vec
     */
    eProsima_user_DllExport void vec(
            std::vector<MvregEdgeAttr>&& _vec)
    {
        m_vec = std::move(_vec);
    }

    /*!
     * @brief This function returns a constant reference to member vec
     * @return Constant reference to member vec
     */
    eProsima_user_DllExport const std::vector<MvregEdgeAttr>& vec() const
    {
        return m_vec;
    }

    /*!
     * @brief This function returns a reference to member vec
     * @return Reference to member vec
     */
    eProsima_user_DllExport std::vector<MvregEdgeAttr>& vec()
    {
        return m_vec;
    }



private:

    std::vector<MvregEdgeAttr> m_vec;

};
/*!
 * @brief This class represents the structure MvregNodeAttrVec defined by the user in the IDL file.
 * @ingroup IDLGraph
 */
class MvregNodeAttrVec
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MvregNodeAttrVec()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MvregNodeAttrVec()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MvregNodeAttrVec that will be copied.
     */
    eProsima_user_DllExport MvregNodeAttrVec(
            const MvregNodeAttrVec& x)
    {
                    m_vec = x.m_vec;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MvregNodeAttrVec that will be copied.
     */
    eProsima_user_DllExport MvregNodeAttrVec(
            MvregNodeAttrVec&& x) noexcept
    {
        m_vec = std::move(x.m_vec);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MvregNodeAttrVec that will be copied.
     */
    eProsima_user_DllExport MvregNodeAttrVec& operator =(
            const MvregNodeAttrVec& x)
    {

                    m_vec = x.m_vec;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MvregNodeAttrVec that will be copied.
     */
    eProsima_user_DllExport MvregNodeAttrVec& operator =(
            MvregNodeAttrVec&& x) noexcept
    {

        m_vec = std::move(x.m_vec);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MvregNodeAttrVec object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MvregNodeAttrVec& x) const
    {
        return (m_vec == x.m_vec);
    }

    /*!
     * @brief Comparison operator.
     * @param x MvregNodeAttrVec object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MvregNodeAttrVec& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member vec
     * @param _vec New value to be copied in member vec
     */
    eProsima_user_DllExport void vec(
            const std::vector<MvregNodeAttr>& _vec)
    {
        m_vec = _vec;
    }

    /*!
     * @brief This function moves the value in member vec
     * @param _vec New value to be moved in member vec
     */
    eProsima_user_DllExport void vec(
            std::vector<MvregNodeAttr>&& _vec)
    {
        m_vec = std::move(_vec);
    }

    /*!
     * @brief This function returns a constant reference to member vec
     * @return Constant reference to member vec
     */
    eProsima_user_DllExport const std::vector<MvregNodeAttr>& vec() const
    {
        return m_vec;
    }

    /*!
     * @brief This function returns a reference to member vec
     * @return Reference to member vec
     */
    eProsima_user_DllExport std::vector<MvregNodeAttr>& vec()
    {
        return m_vec;
    }



private:

    std::vector<MvregNodeAttr> m_vec;

};
}

#endif // _FAST_DDS_GENERATED_IDLGRAPH_HPP_


